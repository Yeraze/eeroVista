name: PR Validation

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest
          pip install -r requirements.txt

      - name: Run ruff linter
        run: |
          ruff check src/ --output-format=github || echo "::warning::Linting issues found, but not blocking PR"

      - name: Run ruff formatter check
        run: |
          ruff format --check src/ || echo "::warning::Formatting issues found, but not blocking PR"

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          pip install -r requirements.txt

      - name: Run tests
        run: |
          if [ -d "tests" ] || find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
            pytest -v --cov=src --cov-report=term-missing || exit 1
          else
            echo "::notice::No tests found yet. Add tests to the 'tests/' directory."
            exit 0
          fi

  docker-build-validation:
    name: Validate Docker Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          # ARM builds are validated on release, not in PRs (too slow)
          # - linux/arm64
          # - linux/arm/v7
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract platform name
        id: platform
        run: |
          platform=${{ matrix.platform }}
          platform_name=${platform##*/}
          platform_name=${platform_name//\//-}
          echo "name=$platform_name" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          tags: eerovista:test-${{ steps.platform.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-compose-test:
    name: Test docker-compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate docker-compose.yml
        run: |
          docker compose config

      - name: Build with docker-compose
        run: |
          docker compose build

      - name: Test container startup
        run: |
          docker compose up -d
          sleep 10

          # Check if container is running
          docker compose ps | grep eerovista | grep "Up" || exit 1

          # Check health endpoint
          curl -f http://localhost:8080/api/health || exit 1

          docker compose down

  summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build-validation, docker-compose-test]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "Validation Results:"
          echo "  Lint: ${{ needs.lint.result }}"
          echo "  Test: ${{ needs.test.result }}"
          echo "  Docker Build: ${{ needs.docker-build-validation.result }}"
          echo "  Docker Compose: ${{ needs.docker-compose-test.result }}"

          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.docker-build-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.docker-compose-test.result }}" == "failure" ]]; then
            echo "::error::One or more validation steps failed"
            exit 1
          fi
          echo "::notice::âœ… All validation checks passed! ARM builds will be validated on release."
